import { util } from '@aws-appsync/utils';

export function request(ctx) {
  const toolConfig = {"tools":[{"toolSpec":{"name":"responseType","description":"Generate a response type for the given field.","inputSchema":{"json":{"type":"object","properties":{"value":{"type":"string","description":"A UTF-8 character sequence."}},"required":["value"]}}}}],"toolChoice":{"tool":{"name":"responseType"}}};
  const prompt = "You are an expert music marketing advisor with deep knowledge of the music industry, digital marketing, and audience engagement strategies. \n    Analyze the provided information and create detailed, actionable marketing plans that are:\n    1. Data-driven and specific to the artist's genre and audience\n    2. Budget-conscious and realistic to implement\n    3. Focused on growth and engagement metrics\n    4. Organized with clear steps and timelines\n    Always provide specific, actionable advice with examples and estimated costs.";
  const args = JSON.stringify(ctx.args);
  const inferenceConfig = undefined;
  const userAgent = createUserAgent(ctx.request);

  return {
    resourcePath: '/model/anthropic.claude-3-5-sonnet-20240620-v1:0/converse',
    method: 'POST',
    params: {
      headers: {
        'Content-Type': 'application/json',
        'x-amz-user-agent': userAgent,
      },
      body: {
        messages: [
          {
            role: 'user',
            content: [{ text: args }],
          },
        ],
        system: [{ text: prompt }],
        toolConfig,
        ...inferenceConfig,
      },
    },
  };
}

export function response(ctx) {
  if (ctx.error) {
    util.error(ctx.error.message, ctx.error.type);
  }

  // Check for AccessDeniedException.
  // This can happen if:
  //   1. The Bedrock model isn't enabled in this region.
  //   2. The IAM policy statement for the role assumed by the data source for this resolver doesn't include them model.
  //    This shouldn't happen because we're managing the policy statements.
  // We're using a generic error description here (as opposed to using the response body)
  // to prevent information about the system from leaking.
  const errorType = ctx.result.headers['x-amzn-ErrorType'];
  if (errorType) {
    if (errorType.startsWith('AccessDeniedException')) {
      const errorMessage = 'The model is disabled or this generation route is missing a necessary identity-based policy.';
      util.error(errorMessage, 'AccessDeniedException');
    }

    util.error('', errorType);
  }

  const body = JSON.parse(ctx.result.body);
  const value = body?.output?.message?.content?.[0]?.toolUse?.input?.value;

  if (!value) {
    util.error('Invalid Bedrock response', 'InvalidResponseException');
  }

  
  return value;
}

function createUserAgent(request) {
  const packageMetadata = 'amplify-graphql-generation-transformer#1.1.0';
  let userAgent = request.headers['x-amz-user-agent'];
  if (userAgent) {
    userAgent = `${userAgent} md/${packageMetadata}`;
  } else {
    userAgent = `lib/${packageMetadata}`;
  }
  return userAgent;
}
